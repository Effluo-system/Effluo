name: CI/CD Pipeline

on:
  push:
    branches: [ deploy/aws ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: effluo-eks-cluster
  EKS_CLUSTER_ENDPOINT: https://F31EA54302C37E9E11F860A2D3B15F85.yl4.us-east-1.eks.amazonaws.com
  DOCKER_IMAGE_NAME: effluo-app
  RDS_ENDPOINT: effluo-db.c8vqoiwgcoek.us-east-1.rds.amazonaws.com:5432
  DATABASE_NAME: effluo

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install --force
    
    # - name: Run tests
    #   run: npm test
    
    - name: Run build
      run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Verify Docker login
      run: docker info

    # Simple approach: use git commit SHA as tag
    - name: Generate image tag
      id: tag
      run: |
        IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${GITHUB_SHA:0:8}"
        echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "Generated image tag: ${IMAGE_TAG}"

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.tag.outputs.image_tag }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    outputs:
      image-tag: ${{ steps.tag.outputs.image_tag }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS Identity
      run: aws sts get-caller-identity

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        kubectl config use-context arn:aws:eks:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:cluster/${{ env.EKS_CLUSTER_NAME }}

    - name: Deploy to EKS
      run: |
        echo "Using image tag: ${DOCKER_IMAGE_TAG}"
        if [ -z "${DOCKER_IMAGE_TAG}" ]; then
          echo "Error: DOCKER_IMAGE_TAG is empty"
          exit 1
        fi
        sed -i "s|IMAGE_TAG|${DOCKER_IMAGE_TAG}|g" k8s/deployment.yaml
        echo "Updated deployment.yaml:"
        grep -A 5 -B 5 "image:" k8s/deployment.yaml
        kubectl apply -f k8s/deployment.yaml --validate=false
        kubectl rollout status deployment/effluo-app -n default --timeout=300s
        kubectl get services effluo-app-service -n default

  notify:
    needs: [test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi